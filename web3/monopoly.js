
// web3 is an Ethereum client library
// Injected by metamask
// const Web3 = require('web3');
// const web3 = new Web3();

// web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

// This file is generated by the Solidity compiler to easily interact with
// the contract using the web3 library.
// abi = Application Binary Interface
const monopolyAbi = [{"constant":false,"inputs":[],"name":"claimFine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"finesBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newManager","type":"address"}],"name":"newBankManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"bankBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"activeFineClaim","outputs":[{"name":"to","type":"address"},{"name":"approved","type":"bool"},{"name":"expiretime","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"toCharmName","type":"string"},{"name":"value","type":"uint256"}],"name":"bankToCharm","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"value","type":"uint256"}],"name":"payToBank","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"ownerToCharm","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"value","type":"uint256"}],"name":"payToFines","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"toCharmName","type":"string"},{"name":"value","type":"uint256"}],"name":"payToCharm","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"charms","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"charm","type":"string"},{"name":"to","type":"address"}],"name":"assignPlayer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"releaseFine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"resetGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"bankManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"decimalUnits","type":"uint8"},{"name":"tokenSymbol","type":"string"},{"name":"ownerNew","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"string"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"string"},{"indexed":false,"name":"to","type":"string"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Paid","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"string"}],"name":"ClaimFines","type":"event"}];
const MonopolyContract = web3.eth.contract(monopolyAbi);

const contractAddress = "0x253bb63b3233f42688425Ba3d8320E69c1C67b83";
const monopolyContract = MonopolyContract.at(contractAddress);

function convertActiveFineClaim(data) {
    return {
        to: data[0],
        approved: data[1],
        expiretime: data[2].toNumber()
    };
}

// uint vars
monopolyContract.bankBalance( (err,data) => console.log("bankBalance",data.toNumber()));
monopolyContract.totalSupply( (err,data) => console.log("totalSupply",data.toNumber()));
monopolyContract.balanceOf(0, (err,data) => console.log("balanceOf",data.toNumber()));
monopolyContract.finesBalance( (err,data) => console.log("finesBalance",data.toNumber()));

// address
monopolyContract.owner( (err,data) => console.log("owner",data));
monopolyContract.bankManager( (err,data) => console.log("bankManager",data));


// uint => string
monopolyContract.charms(0, (err,data) => console.log("charms",data));

// structs
monopolyContract.activeFineClaim( (err,data) => console.log("activeFineClaim",convertActiveFineClaim(data)));

// setTimeout(setBankManager, 1000);

function setBankManager() {
    monopolyContract.newBankManager("0xba55f0f6f20b9df12acd52aedf94b78476ba9197", (err,data) => {
        
        if(err){
            console.log("err@newBankManager",err);
            return;
        }
        
        console.log("newBankManager",data);

    });
}


// // Get handle on Paid event
const paidEvent = monopolyContract.Paid();
paidEvent.watch((error, event) => {
    if(error) {
        console.log(error);
        return;
    }

    console.log(event);

});
